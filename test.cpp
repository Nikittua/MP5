#include "SergeevPT5.cpp"
void showSingletonAdvAndDisadv() {
    // Преимущества Singleton
    // Создание единственного экземпляра класса
    Logger* logger1 = Logger::getInstance();
    Logger* logger2 = Logger::getInstance();
    assert(logger1 == logger2);  // Проверяем, что получаем один и тот же экземпляр

    // Глобальный доступ
    logger1->logEvent("Normal", "Event 1");
    logger2->logEvent("Normal", "Event 2");
    logger1->printLastEvents();  // События доступны из любого места в коде

    // Недостатки Singleton
    // Затруднение в тестировании
    Logger* logger3 = Logger::getInstance();
    logger3->logEvent("Error", "Test event");
    logger1->printLastEvents();  // Тестовое событие влияет на вывод в других тестах


}

int main() {
    showSingletonAdvAndDisadv();

    return 0;
}


// Паттерн Singleton применяется, когда требуется создать только один экземпляр класса, который будет доступен глобально в приложении. 
// Он обеспечивает гарантированное наличие только одного экземпляра класса и предоставляет глобальную точку доступа к этому экземпляру.

// Преимущества использования паттерна Singleton:

// Гарантирует, что в системе существует только один экземпляр класса.
// Предоставляет глобальную точку доступа к этому экземпляру.
// Позволяет избежать создания дубликатов объектов и экономит ресурсы системы.
// Недостатки использования паттерна Singleton:

// Может затруднить юнит-тестирование, так как объект Singleton является глобальным и его состояние может повлиять на другие тесты.
// Может нарушать принцип единственной ответственности, так как класс-синглтон может выполнять несколько задач.